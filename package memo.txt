presentation 수정 사항

-presentation은 view관리만, 데이터 처리는 repo에서 처리
-view model에서 데이터를 받았고 전달해주면 그것에 대한 view의 상태는 view에서 처리함

data 수정 사항

-sp는 유틸에서 관리, 데이터 레이어는 데이터만 관리한다.
-application에 올려두자.


전체

- 전체구조
비즈니스 로직 처리 -> 서비스
데이터 받아오기 -> 레포
뷰상태 -> 뷰

-메소드 관리
최대한 작은 단위로 자른다.
카카오 auth를 받는다 -> 실패? 성공? -> getme를 해라 -> adduser를 해라 -> 로그인 절차완료
이런 flow대로 메소드를 만들자.





view의 관련된 상태를 관리해야함. -> view의 visibility
user의 관련된 상태다 -> 데이터를 받아야 안다. -> repo가 가지고 있어야함
액션 관리는 view에서 관리

비즈니스 로직 처리 -> 서비스
데이터 받아오기 -> 레포
뷰의 관리 -> 뷰

//여기서는 넣어주지 말자 -> 콜백이 꼬일수도 있음
//뷰모델 서비스 처럼 보자.

//함수는 작은 단위로 쪼개서 전체적인 프로세스를 읽을 수 있게 만들자
//함수로 다 쪼개자 -> 카카오 auth를 받는다 -> 실패? 성공? -> getme를 해라 -> adduser를 해라 -> 로그인 절차완료
//이런것 처럼 각 기능별, 또는 flow를 만들어주는게 좋다.

//pure function으로 -> 구글링 하자


//테이블 단위 -> sqlite 같은 것
//간단하게 사용 될만한(어제 앱을 켰다) key, value 단위는 sp를 사용

//user repo -> 서버에서 getMe를 받아오거나 apple로 로그인했냐? naver로 했냐 등등..
//remoteDataSource, localDataSource로 나누자.
//지금 이건 util같은 단위임. 나눠서 따로 관리해보자

//data 패키지 내부에서는 data로 기준을 만들었는데 왜 sp가 있을까? -> 기준이 모호함
//이건 clean 아키텍쳐에서 가장 밖, util 개념이다.
//sp를 뺴놨따. 최상위에 올려두는게 더 깔끔해보인다.