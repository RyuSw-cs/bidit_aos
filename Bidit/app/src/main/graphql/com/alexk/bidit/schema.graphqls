enum AlarmType{
    MASTER,
    ENDINGSOON,
    ENDTIME,
    SUCCESSFULBID,
    HIGHERBIDDER,
    CHAT,
    EVENT
}

type UserAlarm{
    id: Int
    status: Int     # 0=enable, 1=disable
    userId: Int
    alarmId: Int
    createdAt: String
    updatedAt: String
    deletedAt: String
}

type Alarm{
    id: Int
    status: Int
    type: AlarmType
    title: String
    content: String
    createdAt: String
    updatedAt: String
    deletedAt: String
}

type AppleAccount{
    id: Int!
    status: Int!        # 0=VALID, 1=INVALID
    userId: Int!
    sub: String
    email: String
    email_verified: String
    is_private_email: Boolean
    real_user_status: Int
    createdAt: String
    updatedAt: String
    deletedAt: String
    description: String
}

type Bidding {
    id: Int!
    status: Int!
    userId: Int!
    itemId: Int!
    price: Int!
    createdAt: String!
    item: Item
    user: User
}

type SuccessfulBid {
    id: Int!
    status: Int!
    userId: Int!
    itemId: Int!
    biddingId: Int!
    createdAt: String!
    item: Item
    user: User
}

input BiddingQueryInput {
    status: Int
    itemId: Int
    price: Int
}

input BidInput {
    status: Int
    itemId: Int!
    price: Int!
}


type Dibs {
    id: Int!
    status: Int! # 0=valid, 1=invalid
    userId: Int!
    itemId: Int!
    createdAt: String!
    updatedAt: String
    deletedAt: String
    user: User
    item: Item
}

input ItemQueryInput {
    id: Int
    status: Int
    userId: Int
    categoryId: Int
    name: String
    dueDate: String
    deliveryType: Int
    sCondition: Int
    aCondition: Int
    createdAt: Int
}

input ItemAddInput {
    status: Int
    categoryId: Int!
    sPrice: Int!
    buyNow: Int
    name: String!
    title: String!
    dueDate: String!
    deliveryType: Int!
    sCondition: Int!
    aCondition: Int!
    detail: ItemDetailInput
}

input ItemUpdateInput {
    status: Int
    categoryId: Int
    sPrice: Int
    buyNow: Int
    name: String
    title: String
    dueDate: String
    deliveryType: Int
    sCondition: Int
    aCondition: Int
    detail: ItemDetailInput
}

input ItemDetailInput {
    id:Int
    status:Int  # 0=valid, 1=invalid
    categoryId:Int
    period:Int
    type:String
    vendor:String
    battery:String
    flash:String
    ram:String
    size:String
    networkType:String
    weight:String
    cpu:String
    wire:String
    lens:String
    resolution:String
    cam:String
    warranty:String
}
input ItemImageUpdateInput{
    itemImageId:Int
    image:String
}
enum DeliveryType {
    DIRECT,
    PARCEL,
    BOTH
}
enum ItemStatus{
    REGISTED,
    ONGOING,
    SOLD,
    END,
    CANCEL
}

enum CursorType{
    createdAt,
    dueDate
}

type Item {
    id: Int!
    status: Int! # 0=REGISTED, 1=ONGOING, 2=SOLD, 3=END, 4=CANCEL
    userId: Int!
    categoryId: Int
    sPrice: Int
    cPrice: Int # It's not used. Temporary.
    buyNow: Int
    viewCount: Int
    name: String
    title: String
    dueDate: String
    deliveryType: Int # 0=DIRECT, 1=PARCEL, 2=BOTH
    sCondition: Int
    aCondition: Int
    createdAt: String!
    updatedAt: String
    deletedAt: String
    description:ItemDescription
    image:[ItemImage]
    category: Category
    detail: ItemDetail
    user:User
}

type ItemDescription{
    id: Int!
    status: Int!
    itemId: Int!
    type: Int
    description: String
    createdAt: String!
    updatedAt: String
    deletedAt: String
}

type ItemImage{
    id: Int!
    status: Int!
    itemId: Int!
    type: Int
    url: String
    createdAt: String!
    updatedAt: String
    deletedAt: String
}

type ItemDetail {
    id:Int
    status:Int  # 0=valid, 1=invalid
    itemId:Int
    categoryId:Int
    period:Int
    type:String
    vendor:String
    battery:String
    flash:String
    ram:String
    size:String
    networkType:String
    weight:String
    cpu:String
    wire:String
    lens:String
    resolution:String
    cam:String
    warranty:String
    createdAt:String
    updatedAt:String
    deletedAt:String
}

enum CategoryStatus {
    VALID,
    INVALID
}
type Category {
    id: Int!
    status: Int!
    parentId: Int
    name: String
    depth: Int
    createdAt: String!
    updatedAt: String
    deletedAt: String
    parent: Category
}

type CategoryEdge {
    node: Category
    cursor: String
}

type CategoryConnection {
    totalCount: Int
    edges: [CategoryEdge]
    pageInfo: PageInfo
}

type ItemEdge {
    node: Item
    cursor: String
}

type PageInfo {
    startCursor: String
    endCursor: String
    hasNextPage: Boolean
    hasPrevPage: Boolean
}

type ItemConnection {
    totalCount: Int
    edges: [ItemEdge]
    pageInfo: PageInfo
}

# TODO : should use custom scalar.
enum UserStatus{
    VALID,
    INVALID
}
enum JoinPath{
    KAKAO,
    APPLE,
    GOOGLE
}
enum gender{
    MALE,
    FEMALE
}
enum MembershipStatus{
    VALID,
    INVALID
}

type PushToken {
    id: Int
    status: Int
    userId: Int
    token: String
    createdAt: String
    updatedAt: String
}

type Counting{
    buy:Int
    sell:Int
}
type User {
    id: Int!
    status: Int!    # 0=VALID, 1=INVALID
    nickname: String
    passwd: String
    joinPath: JoinPath
    gender: gender
    birth: String
    email: String
    phone: String
    createdAt: String!
    updatedAt: String
    deletedAt: String
    description: String
    items:ItemConnection
    kakaoAccount:KakaoAccount
    appleAccount:AppleAccount
    pushToken: PushToken
    penalty: Penalty
    userAlarm: UserAlarm
    counting:Counting
}

input userUpdateInput{
    status: Int
    nickname: String
    gender: gender
    birth: String
    deletedAt: String
    description: String
}
input pushTokenUpdateInput{
    status: Int
    token: String
}

type Query{
    getMyBidding(biddingQuery:BiddingQueryInput):[Bidding]
    getBidding(biddingQuery:BiddingQueryInput):[Bidding]
    getMyDibs:[Dibs]
    getItem(id: Int!):Item
    getItemList(itemQuery: ItemQueryInput, keyword:String, first: Int, last: Int, after: String, before: String, cursorType:CursorType):ItemConnection
    getEndingSoonItems(itemQuery: ItemQueryInput, keyword:String, count:Int):[Item]
    getCategoryList(categoryQuery: CategoryQueryInput, first: Int, last: Int, after: String, before: String):CategoryConnection
    getCategory(id: Int!):Category
    scanCategory:[Category]
    getUser(id: Int!): User
    me:User
}

type Mutation{
    bid(bid:BidInput):Bidding
    addItem(itemAdd:ItemAddInput, description:String, images:[String]):Item
    updateItem(itemId:Int, itemUpdate:ItemUpdateInput, description:String):Item
    updateItemImage(itemId:Int, itemImageUpdate:ItemImageUpdateInput):Item
    addUser:User
    updateUser(userUpdate:userUpdateInput):User
    updateMembership(status:MembershipStatus):User
    updatePushToken(pushTokenUpdate:pushTokenUpdateInput):Boolean
    addUserAlarm(userId:Int, status:Int):Boolean
}

input CategoryQueryInput {
    id: Int
    status: Int
    parentId: Int
    name: String
    depth: Int
}


scalar Long

type KakaoAccount{
    id:Long!
    status:Int!
    userId:Int!
    profile_needs_agreement: Boolean
    profile_nickname_needs_agreement:Boolean
    profile_image_needs_agreement:Boolean
    name_needs_agreement:Boolean
    name:String
    email_needs_agreement:Boolean
    is_email_valid:Boolean
    is_email_verified:Boolean
    email:String
    age_range_needs_agreement:Boolean
    age_range:String
    birthyear_needs_agreement:Boolean
    birthyear:String
    birthday_needs_agreement:Boolean
    birthday:String
    birthday_type:String
    gender_needs_agreement:Boolean
    gender:String
    phone_number_needs_agreement:Boolean
    phone_number:String
    ci_needs_agreement:Boolean
    ci:String
    ci_authenticated_at:String
    nickname:String
    thumbnail_image_url:String
    profile_image_url:String
    is_default_image:Boolean
    createdAt:String!
    updatedAt:String!
    deletedAt:String
    description:String
}

enum PenaltyType{
    BIDDING,
    SELLING,
    KICKED
}

type Penalty {
    id: Int!
    status: Int!    # 0=VALID, 1=INVALID
    userId: Int
    type: PenaltyType
    dueDate: String
    description: String
    createdAt: String!
    updatedAt: String
    deletedAt: String
}


schema {
    query: Query
    mutation: Mutation
}
